// tgnasAlgo.cpp
// This program implements a simple linear regression algorithm using gradient descent.
// this algorithm is generated by tgnas , tgnas with its corresponding alphanumerical code
// and is used to predict values based on a linear relationship between input and output.
// t=20,g=7,n=14,a=1,s=19
//with plus and minus sign interchanging element after element
//let us considet the input values as x
//and output values as y
// y = 20x-7x+14x-1x+19x
//this the math behind the algo
// this algo is used to predict the output values based on the input values
// the input values are taken as a vector of integers
//comment out the weight and bias console output to see the realtime values generated for the weight and bias
//if you see this on git, that means i did figure it out how to use git
// this is a simple linear regression algorithm using gradient descent


#include<iostream>
#include<cstdlib>
#include<cmath>
#include<random>
#include<vector>
#include<limits>
#include<string>
using namespace std;
double relu(double z)
{
    return (z>0)?z:0;
}
int main(){
    random_device rd;
    mt19937 gen(rd());
    normal_distribution<> dist(0.0,0.01);
    vector<int> input_values = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    vector<int> output_values = {450, 900, 1350, 1800, 2250, 2700, 3150, 3600, 4050, 4500};
    //int input_values[10]= {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    //int output_values[10] = {450, 900, 1350, 1800, 2250, 2700, 3150, 3600, 4050, 4500};
    double weight = dist(gen);
    //cout<<weight;
    double bias = dist(gen);
    //cout<<bias;

    double learning_rate = 0.0001;
    int epochs = 1000;
    int n = input_values.size();
    for(int i=0;i<epochs;++i)
    {
        double w = 0.0;
        double b = 0.0;

        for(int j=0;j<n;++j){
            double y_pred = weight*input_values[j]+bias;
            double error = output_values[j] - y_pred;
            w+=input_values[j]*error;
            b+=error;
        }
        w = -2.0*(w/n);
        b = -2.0*(b/n);

        weight -= learning_rate * w;
        bias-= learning_rate*b;


    }

    while(true)
    {
        cout<<"Enter the value to predict : ";
        string input;
        cin>>input;
            if(input =="TGNAS"){
            cout<<"Exiting Cya!! "<<endl;
            break;
            }
        try
        {
            double x = stod(input);
            //double prediction = weight * x + bias;
            double z = weight * x + bias;
            double prediction = relu(z);
            cout<<"Prediction for "<<x<<" is : "<<prediction<<endl;
        }catch (exception& e) {
            cout << "Invalid input. Exiting.\n";
            break;
    }

}
return 0;
}
